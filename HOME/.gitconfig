[core]
	excludesfile = ~/.gitignore_global
	editor = emacsclient
	pager = delta
	commentChar = ~

[user]
	name = Masafumi Koba
	email = 473530+ybiquitous@users.noreply.github.com
	signingkey = 47E05B381BF77D33

# Inspired by
# - https://github.com/GitAlias/gitalias
# - http://gggritso.com/human-git-aliases
[alias]

	# Shortcut (most frequent commands)
	a = add
	b = branch --all
	bb = branch --all -vv
	bd = branch --delete
	c = commit
	ca = commit --all
	d = diff
	g = grep
	gg = grep-group
	l = log -50
	ls = ls-files
	s = status

	# Branch
	branch-name = rev-parse --abbrev-ref HEAD
	delete-branch = branch --delete
	master = checkout master
	new-branch = checkout -b
	rename-branch = branch --move
	prune-branches = !"git remote prune $(git origin)"
	# https://stackoverflow.com/questions/28666357/git-how-to-get-default-branch
	default-branch = !"git symbolic-ref --short refs/remotes/origin/HEAD | sed 's|^origin/||'"
	delete-working-branches = !"git branch --no-merged | grep -v $(git default-branch) | xargs -p -I {} git branch --delete --force {}"
	delete-merged-branches = !"git branch --merged | grep -v $(git default-branch) | xargs -I {} git branch --delete {}"

	# Commit
	wip = commit --no-verify --message 'chore: WIP'

	# Tag
	delete-tag = !"f() { git push --delete $(git origin) $1 && git tag --delete $1; }; f"

	# Info
	detail = show --pretty=full --show-signature
	detail-stat = detail --stat
	graph = log --graph
	oneline = log --oneline
	precommit = diff --staged
	staged-files = diff --staged --name-only
	summary = status --short --untracked-files
	origin = !"git remote show | grep -v fork | head -1"
	hash = !"f() { git log -${1:-1} --format='%h' | tail -1 | tr -d '\n'; }; f"
	diff-ignore-spaces = diff --ignore-space-change

	# Grep
	grep-group = grep --heading --break --show-function
	grep-word = grep --word-regexp

	# Config
	edit-config = config --edit
	edit-config-global = edit-config --global
	list-config = config --list
	list-config-global = list-config --global

	# Undo
	amend = commit --amend
	discard = checkout --
	fixup = commit --fixup HEAD
	uncommit = reset --soft HEAD~1
	unstage = restore --staged
	unstage-and-discard = !"f() { git unstage $* && git discard $*; }; f"
	unstash = stash pop
	rewrite = !"f() { git rebase --interactive \"HEAD~$1\"; }; f"

	# Push
	publish = !"git push --no-progress --set-upstream $(git origin) $(git branch-name)"
	force-push = push --no-progress --force-with-lease

	# Pull
	sync = !"f() { git switch --quiet \"$(git default-branch)\" && git pull --prune --no-progress && git delete-merged-branches; }; f"

	# Clean
	cleanest = clean --force -dx

	# Sync fork
	# https://help.github.com/articles/configuring-a-remote-for-a-fork/
	set-upstream = !"f() { if [ -n \"$1\" ]; then git remote add upstream $1; else echo 'usage: git set-upstream https://github.com/{ORIGINAL_OWNER}/{ORIGINAL_REPOSITORY}.git' && exit 1; fi; }; f"
	# https://help.github.com/articles/syncing-a-fork/
	sync-fork = !"git fetch upstream && git merge \"upstream/$(git default-branch)\" && git push && git sync && git remote prune upstream"

	# Plural
	aliases = !"git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /' | sort"
	contributors = shortlog --summary --numbered --no-merges
	remotes = remote --verbose
	stashes = stash list
	tags = tag
	tags-remote = ls-remote --tag

[format]
	pretty = %C(auto)%h %Creset%<(72,trunc)%s %Cgreen%<(16,trunc)%aN%Creset %ar%C(auto)%d

[color]
	ui = auto

[color "grep"]
	filename = green ul
	function = dim
	linenumber = dim

[color "diff"]
	meta = cyan bold
	frag = cyan
	old = red bold
	new = green bold

[commit]
	verbose = true
	gpgSign = true

[diff]
	compactionHeuristic = true
	indentHeuristic = true
	algorithm = patience

[pull]
	rebase = true

[rebase]
	autosquash = true

[grep]
	lineNumber = true
	extendedRegexp = true

[protocol]
	version = 2

[blame]
	coloring = highlightRecent

[credential]
	helper = osxkeychain
