#!/usr/bin/env ruby

require "optparse"
require "html/pipeline"
require "cgi"

options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: github-markup-custom <input_file> [options]"

  opts.on("--full-html", "Generate as full HTML") { |value| options[:full_html] = value }
end
opt_parser.parse!

filename = ARGV[0]

unless filename
  STDERR.puts opt_parser.help
  exit 1
end

unless File.exist? filename
  STDERR.puts "No such file: #{filename}"
  exit 1
end

file_content = File.read(filename, encoding: Encoding::UTF_8)

class AnchorFilter < HTML::Pipeline::Filter
  def call
    doc.css("h1, h2, h3, h4, h5, h6").each do |node|
      id = node.text.tr(" ", "-").delete("()").downcase(:ascii)
      node[:id] = CGI.escape(id)
    end
    doc
  end
end

class CSSAndSyntaxHighlightFilter < HTML::Pipeline::Filter
  def call
    <<~HTML
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css" />
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlightjs/styles/github.min.css" />

      <style>
        body {
          padding: 1rem 3rem;
        }

        @media only screen {
          body {
            border: 1px solid #ddd;
            margin: 1rem auto;
            max-width: 45rem;
            padding: 3rem;
          }
        }

        .markdown-body h1,
        .markdown-body h2,
        .markdown-body h3,
        .markdown-body h4,
        .markdown-body h5,
        .markdown-body h6,
        .markdown-body h6,
        .markdown-body strong {
          font-weight: 700;
        }
      </style>

      <div class="markdown-body">
        #{doc}
      </div>

      <script src="https://cdn.jsdelivr.net/npm/highlightjs"></script>
      <script>
        document.querySelectorAll("pre[lang] > code").forEach(code => {
          code.classList.add(code.parentElement.lang);
          hljs.highlightBlock(code);
        });
      </script>
    HTML
  end
end

pipeline = HTML::Pipeline.new [
  HTML::Pipeline::MarkdownFilter,
  HTML::Pipeline::ImageMaxWidthFilter,
  HTML::Pipeline::AutolinkFilter,
  AnchorFilter,
  CSSAndSyntaxHighlightFilter,
]

output_html = pipeline.call(file_content)[:output].to_s.force_encoding(Encoding::UTF_8)

if options[:full_html]
  puts <<~HTML
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <meta charset="UTF-8" />
        <title>#{filename}</title>
      </head>
      <body>
        #{output_html}
      </body>
    </html>
  HTML
else
  puts output_html
end
